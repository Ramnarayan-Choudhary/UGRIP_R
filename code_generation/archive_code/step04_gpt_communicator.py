# Teacher and Student Interactions Util code and workflow

import os
from openai import AzureOpenAI
import datetime
import json
import util_python_formatter as pyform

class Conversation:
    def __init__(self, client, model_name, role):
        self.role = role
        self.client = client
        self.model_name = model_name
        self.resp_dict = {}
        self.msg_text = []
        self.prev_resp = ""
        self.idx = 0

    def process(self, prompt, max_tokens=300):
        self.msg_text.append({"role": "system", "content": self.prev_resp})
        self.msg_text.append({"role": "user", "content": prompt})

        completion = self.client.chat.completions.create(
            model=self.model_name,
            messages=self.msg_text,
            temperature=0,
            max_tokens=max_tokens,
            top_p=0.95,
            frequency_penalty=0,
            presence_penalty=0,
            stop=None,
        )

        resp_content = completion.to_dict()['choices'][0]['message']['content']
        self.resp_dict[f'Prompt {self.idx + 1}'] = resp_content
        self.prev_resp = resp_content
        self.idx += 1
         
        return resp_content
        # print(f"SUCCESS: prompt {self.idx} is processed.")

    def __str__(self):
        return f"{self.role} Answer {self.idx}: {self.prev_resp}"

def load_model(model_name):
    print(f"Loading {model_name}...")
    client = AzureOpenAI(
        azure_endpoint="https://cullmsouthindia.openai.azure.com/",
        api_key="037155e1b16a432fa836637370eca0e3",
        api_version="2024-02-15-preview"
    )
    print("SUCCESS: model loaded.")
    return client


def get_teacher_exmaples():
    return f'''Original Sentence: The cat sat on the mat.
Engrypted Sentence: The sat on the mat tac.

Original Sentence: Knowledge speaks louder than words.
Engrypted Sentence: speaks louder than words egdelwonK.

Original Sentence: A shiny and brown fox jumps over the lazy dog.
Engrypted Sentence: A shiny and brown jumps over the lazy dog xof.
'''

def get_teacher_skeleton_code():
    return f'''
import nltk
from nltk import pos_tag
from nltk.tokenize import word_tokenize

def encrypt_sentence(example):

    # TODO: using the nltk module, construct the "new_sentence" that can encrypt each sentence from "examples".
    
    return new_sentence

# Examples
examples = [
    "The cat sat on the mat.",
    "Knowledge speaks louder than words.",
    "A shiny and brown fox jumps over the lazy dog.",
]

answers = []
for example in examples:
    answers.append(encrypt_sentence(example))


'''

def form_teacher_question(teacher_examples, teacher_skeleton_code):
    return f'''This is a word puzzle, where there are two secret rules that encrypt the sentence. Can you guess those rules, then use Python script to simulate this?

here are some examples: 

{teacher_examples}

Please fill in this python skeleton code. Make sure to also keep the "examples" and for loop.

{teacher_skeleton_code}

Only return the Python code itself. No other explanations needed.
'''

def get_teacher_answers():
    return f'''The sat on the mat tac.
speaks louder than words egdelwonK.
A shiny and brown jumps over the lazy dog xof.
The and moon and stars all rise in the east nus.
The big big is full ylleb.
is the mother of sucess eruliaF.
'''

def get_teacher_evaluation(teacher_answers, student_answers):
    return f'''Now, can you compare against the teacher's output and the students' outputs?
   
    Original examples:

    {teacher_answers}

    Student's answers:

    {student_answers}

Both "Original examples" and "Student's answers" are generated by a python function.
Can you give a one- or two-sentence hint to the student on what grammar rules they should consider? 
This can help the student revise their Python coding.
Only give the hints, nothing else.
'''

def get_student_hint(teacher_hint, teacher_answers, student_answers, teacher_skeleton_code):
    return f'''This is a good attempt. However, it's not exactly correct. Please consider the following hint:
    {teacher_hint}

Can you try again with the code implementation? Again, this is the answer key:

{teacher_answers}

And this is your previous response:

{student_answers}

Fill in this template, the same one as before:

{teacher_skeleton_code}

'''

def revised_teacher_evaluation(teacher_answers, student_answers):
    return f'''The student has revised thier answer. Can you verify again?
   
    The original example:

    {teacher_answers}

    The student's answers:

    {student_answers}

If the answers look correct, please answer "test passed". Otherwise, answer "try again".
'''

def ask_for_student_comments():
    return f'''Your code works great! Can you explain your reasoning behind this code?
    Please answer in a few sentences. You can also give me a list of steps you take.
    Then, come up with a few new example pairs of the "original sentence" and "encrypted sentence" to test your code.'''


def main():
    # Help run the student code
    helper = pyform.ScriptHelper()
    file_name = 'student_script.py'

    # Set up GPT clients
    model_name = 'gpt4'
    teacher_convo = Conversation(load_model(model_name), model_name, 'Teacher')
    student_convo = Conversation(load_model(model_name), model_name, 'Student')
    
    # ------------------------- Conversation starts here -------------------------
    # Teacher gives question
    question = form_teacher_question(get_teacher_exmaples(), get_teacher_skeleton_code())
    stdout = student_convo.process(question, 600)

    # Helper runs student responses as a python script
    file_name = 'student_script01.py'
    helper.save_to_file(stdout, file_name)
    stdout, stderr = helper.run_script(file_name)

    # Compare student stdout with teacher evaluation
    prompt = get_teacher_evaluation(get_teacher_answers(), stdout)
    hint = teacher_convo.process(prompt, max_tokens=600)

    print(" --------------------------- HINT FIRST --------------------------- ")
    print(hint)
    print(" ------------------------------------------------------------- ")

    # Gives hint back to the student, then runs the student's code
    student_hint = get_student_hint(hint, get_teacher_answers(), stdout, get_teacher_skeleton_code())
    stdout = student_convo.process(student_hint, 600)
    
    file_name = 'student_script02.py'
    helper.save_to_file(stdout, file_name)
    stdout, stderr = helper.run_script(file_name)
    
    # Teacher evaluates again
    prompt = revised_teacher_evaluation(get_teacher_answers(), stdout)
    pass_fail_tag = teacher_convo.process(prompt, max_tokens=400)

    print(prompt)
    print(" --------------------------- PASS/FAIL --------------------------- ")
    print(pass_fail_tag)
    print(" ------------------------------------------------------------- ")

    # Let the student explain its reasoning
    iter = 3
    if pass_fail_tag == "test passed":
        prompt = ask_for_student_comments()
        stdout = student_convo.process(prompt, max_tokens=400)
        print(" --------------------------- COMMENT --------------------------- ")
        print(stdout)
        print(" ------------------------------------------------------------- ")
    else:
        print("Student needs to try again.")
        # TODO: Add a loop to keep trying until the student passes the test
        while pass_fail_tag != "test passed" and iter < 5:
            # Compare student stdout with teacher evaluation
            prompt = get_teacher_evaluation(get_teacher_answers(), stdout)
            hint = teacher_convo.process(prompt, 600)
            print(f" --------------------------- NEW HINT {iter}--------------------------- ")
            print(hint)
            print(" ------------------------------------------------------------- ")

            # Gives hint back to the student, then runs the student's code
            student_hint = get_student_hint(hint, get_teacher_answers(), stdout, get_teacher_skeleton_code())
            stdout = student_convo.process(student_hint, 600)
    
            file_name = f'student_script0{iter}.py'
            helper.save_to_file(stdout, file_name)
            stdout, stderr = helper.run_script(file_name)
    
            # Teacher evaluates again
            prompt = revised_teacher_evaluation(get_teacher_exmaples(), stdout)
            pass_fail_tag = teacher_convo.process(prompt, max_tokens=400)
            print(f" --------------------------- PASS/FAIL {iter} --------------------------- ")
            print(pass_fail_tag)
            print(" ------------------------------------------------------------- ")

            iter += 1


    print('ALL INTERACTIONS FINISHED.')

if __name__ == "__main__":
    main()
